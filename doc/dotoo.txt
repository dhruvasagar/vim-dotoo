*dotoo.txt*   TODO Management in VIM inspired by Org Mode                   *dotoo*
-------------------------------------------------------------------------------

       DoToo, the awesome TODO management system inspired by Org-Mode.
                               Version 0.14.3.2

                Author: Dhruva Sagar (https://dhruvasagar.dev)
              License: MIT (http://opensource.org/licenses/MIT)

-------------------------------------------------------------------------------
CONTENTS                                                         *dotoo-contents*

      1. Getting Started ............................ |dotoo-getting-started|
            1. Document Structure ................... |dotoo-document-structure|
            2. Agenda Views ......................... |dotoo-agenda-views|
                  1. Agenda View .................... |dotoo-agenda-view|
                  2. Todo View ...................... |dotoo-todo-view|
                  3. Refiles View ................... |dotoo-refiles-view|
                  4. Notes View ..................... |dotoo-notes-view|
            3. Capture .............................. |dotoo-capture|
      2. Options .................................... |dotoo-options|
      3. Mappings ................................... |dotoo-mappings|
      4. Commands ................................... |dotoo-commands|
      5. Contributing ............................... |dotoo-contributing|
      6. Credits .................................... |dotoo-credits|

-------------------------------------------------------------------------------
GETTING STARTED                                           *dotoo-getting-started*

                                                      *dotoo-document-structure*
      1. Document Structure: The docment structure is borrowed from emacs'
         Org Mode.

         These are the dotoo document mappings :
              `gI`:         clock-in headline under cursor
              `gO`:         clock-out headline under cursor
              `gM`:         move headline under cursor to selected target
              `cit`:        change TODO of headline under cursor
              `cic`:        toggle checkbox under cursor
              `<C-A>`:      Increment date under cursor by 1 day, can be preceded
                          with a [count]
              `<C-X>`:      Decrement date under cursor by 1 day, can be preceded
                          with a [count]
              `<C-C><C-C>`: Normalize a date (fixes day name if incorrect)
              `<Tab>`:      Cycle headline visibility similar to Org mode
              `<CR>`:       Follow link under cursor
              `<BS>`:       Go back to previous document after following a link

              They `<C-X>`, `<C-A>` and `cic` commands are repeatable using |.|

         A few helpful |:iabbrev| :
              :date:      Enter the current date
              :time:      Enter the current time
              :datetime:  Enter the current date and time

         Link structure available:
              * [[LINK][DESCRIPTION]]
              * [[LINK]]
         Possible values for LINK:
              * [[#MY-CUSTOM-ID]] - Finds headline that has `:CUSTOM_ID:
                MY-CUSTOM-ID` property defined
              * [[*Go to dentist]] - Finds headline that matches title "Go to
                dentist" (case insensitive)
              * [[https://google.com]] - Opens url in browser (requires
                http(s):// schema and |netrw| plugin to be loaded)
              * [[file:/path/to/my/file]] - Opens given file path, no matter if
                it exists or not. File path may be relative to the current file.
                eg) [[file:./relative/to/file]]
                `NOTE: This format is deprecated in favor of following format`
              * [[/path/to/my/existing/file]] - Opens given file path, new
                buffer with file if it doesn't exist.
              * [[My link to something]] - At first it tries to find a headline
                with title or content that matches "dedicated target"
                `<<My link to something>>`. If nothing is found, it falls back to
                finding headline by title "My link to something" (both case
                insensitive). If that also fails, it will create a `page` with
                the title as the name of the file at |g:dotoo#link#pages_path|

            For more detailed explanation check these links:
              * https://orgmode.org/manual/Internal-Links.html#Internal-Links
              * https://orgmode.org/manual/External-Links.html#External-Links

            Note that only options explained above are supported from org mode manual.

                                                            *dotoo-agenda-views*
      2. Agenda Views: You can have a look at the agenda views at anytime using
         the key binding `gA`, this displays the list of currently registered
         agenda views available, selecting one of them then opens up the view.
         The agenda views pulls information from agenda files, this can be
         configured by setting `g:dotoo#agenda#files` which is a list of file
         names / file blobs.

         These are the agenda view mappings common to all :
               `gq`:    quit agenda buffer
               `r`:     refresh agenda buffer (force reload / parse agenda files)
               `c`:     change TODO of headline under cursor
               `u`:     undo change in file of headline under the cursor
               `s`:     save all agenda files
               `C`:     trigger capture menu
               `i`:     clock-in for headline under cursor
               `o`:     clock-out for headline under cursor
               `m`:     Move headline to selected target
               `/`:     Filter by file, tags or todos
               `<CR>`:  Open headline under cursor & close agenda
               `<C-S>`: Open headline under cursor in `split`
               `<C-T>`: Open headline under cursor in `tab`
               `<C-V>`: Open headline under cursor in `vsplit`
               `<Tab>`: same as `<C-V>`

                                                             *dotoo-agenda-view*
         1. Agenda View : This lists all TODOs that are nearing deadline or are
            scheduled. It provides a variety of mappings to manipulate the TODO
            items from the agenda view itself.

            These are mappings specific to agenda view:
               `f`:     go forward by 1 day
               `b`:     go backward by 1 day
               `.`:     go to today's date
               `S`:     Change agenda span to day, week or month
               `R`:     Report of clocking summary for the current span

                                                               *dotoo-todo-view*
         2. TODOs View : This lists all unscheduled TODO items from your
            agenda files.

                                                            *dotoo-refiles-view*
         3. Refiles : This lists all headlines in the refile file that you
            should move to an appropriate target file / project / headline.

                                                              *dotoo-notes-view*
         4. Notes : This lists all the notes from all the agenda files.

                                                             *dotoo-tagged-view*
         5. Tagged : This lists all headlines that have tags.

                                                             *dotoo-search-view*
         6. Search : This lists all headlines that match an input search
            term.

                                                               *dotoo-wiki-view*
         7. Wiki : This lists all headlines that have `notes` in the path,
            assuming you manage notes in a notes folder that is under the agenda
            files path. This is better than Notes view since it does not require
            the presence of `:NOTE:` tag. If you just want to see everything in
            your knowledge base at a quick glance this is useful.

                                                                 *dotoo-capture*
      3. Capture: This launches the capture menu that you can use to quickly
         capture TODOs, NOTES etc. This can be invoked using the keybinding
         |gC| from anywhere. It will append the captured template into the
         refile file configured by |g:dotoo#capture#refile|. Capture also
         clocks the tasks to log the time spent while capturing, this works
         best with MEETING captures where you can just launch capture mode and
         leave it open till the duration of the meeting to log the meeting,
         though it can be used with any capture. You can disable clocking with
         capture by setting |g:dotoo#capture#clock| to `0`

-------------------------------------------------------------------------------
OPTIONS                                                          *dotoo-options*

                                           *g:dotoo_headline_highlight_colors*
      |g:dotoo_headline_highlight_colors|
            This setting defines the syntax highlight groups to be used for
            various headlines of separate levels. >
                let g:dotoo_headline_highlight_colors = [
                  \ 'Title',
                  \ 'Constant',
                  \ 'Identifier',
                  \ 'Statement',
                  \ 'PreProc',
                  \ 'Type',
                  \ 'Special']
<
                                        *g:dotoo_headline_shade_leading_stars*
      |g:dotoo_headline_shade_leading_stars|
            This setting defines whether the leading stars of the headlines
            will be shaded. Set this to 0 if you don't want them to be shaded. >
                let g:dotoo_headline_shade_leading_stars = 1
<
                                                  *g:dotoo_todo_keyword_faces*
      |g:dotoo_todo_keyword_faces|
            This setting defines what the faces of various TODO states look
            like. >
                let g:dotoo_todo_keyword_faces = [
                  \ ['TODO', [':foreground 160', ':weight bold']],
                  \ ['NEXT', [':foreground 27', ':weight bold']],
                  \ ['DONE', [':foreground 22', ':weight bold']],
                  \ ['WAITING', [':foreground 202', ':weight bold']],
                  \ ['HOLD', [':foreground 53', ':weight bold']],
                  \ ['CANCELLED', [':foreground 22', ':weight bold']],
                  \ ['MEETING', [':foreground 22', ':weight bold']],
                  \ ['PHONE', [':foreground 22', ':weight bold']]
                  \ ]
<
                                                  *g:dotoo_begin_src_languages*
      |g:dotoo_begin_src_languages|
            List of filetypes that should be highlighted in `#+BEGIN_SRC filetype`
            code blocks.
            Example. >
                let g:dotoo_begin_src_languages = ['vim', 'json', 'javascript']
<
            Default value: `[]`

                                                *g:dotoo#parser#todo_keywords*
      |g:dotoo#parser#todo_keywords|
            This setting defines various todo keywords to be recognized. A `|`
            separates final done states from others. >
                let g:dotoo#parser#todo_keywords = [
                  \ 'TODO',
                  \ 'NEXT',
                  \ 'WAITING',
                  \ 'HOLD',
                  \ 'PHONE',
                  \ 'MEETING',
                  \ '|',
                  \ 'CANCELLED',
                  \ 'DONE']
<

                                                 *g:dotoo#agenda#warning_days*
      |g:dotoo#agenda#warning_days|
            This setting sets the warning period, so you're warned about TODOs
            that are due within the warning period from today. It is a string
            of the form '{number}[dmy]' where 'd' stands for day, 'm' for
            month, 'y' for year. >
                let g:dotoo#agenda#warning_days = '30d'
<

                                                        *g:dotoo#agenda#files*
      |g:dotoo#agenda#files|
            This setting is an array of files the agenda will read to show
            what's on the agenda within the warning days. They can include
            wildcards which will be expanded using |glob()| >
                let g:dotoo#agenda#files = ['~/Documents/dotoo-files/*.dotoo']
<

                                                 *g:dotoo#time#time_ago_short*
      |g:dotoo#time#time_ago_short|
            This setting defines whether the time_ago would output a short
            value near the closest years, months, days, hours, minutes or
            seconds or a long value with the full time ago. Set it to 1 to see
            a short time ago. >
                let g:dotoo#time#time_ago_short = 0
<
                                                      *g:dotoo#capture#refile*
      |g:dotoo#capture#refile|
            This setting defines the default refile file where the capture
            captures templates into. >
                let g:dotoo#capture#refile = expand('~/Documents/dotoo-files/refile.dotoo')
<
                                                         *g:dotoo#capture#clock*
      |g:dotoo#capture#clock|
            This setting enables clocking while capturing. >
                let g:dotoo#capture#clock = 1
<
                                                   *g:dotoo#capture#templates*
      |g:dotoo#capture#templates|
            This setting defines the capture templates the capture menu uses. >
                let g:dotoo#capture#templates = {
                      \ 't': {
                      \   'description': 'Todo',
                      \   'lines': [
                      \     '* TODO %?',
                      \     'DEADLINE: [%(strftime(g:dotoo#time#datetime_format))]'
                      \   ],
                      \  'target': 'refile'
                      \  'clock': 1,
                      \ },
                      \ 'n': {
                      \   'description': 'Note',
                      \   'lines': ['* %? :NOTE:'],
                      \ },
                      \ 'j': {
                      \   'description': 'Journal Entry',
                      \   'lines': [ '* %?' ],
                      \   'target': 'notes/diary/$(strftime(g:dotoo#time#date_format)).dotoo',
                      \   'append': 1,
                      \ },
                      \ 'm': {
                      \   'description': 'Meeting',
                      \   'lines': ['* MEETING with %? :MEETING:'],
                      \   'clock': 1,
                      \ },
                      \ 'p': {
                      \   'description': 'Phone call',
                      \   'lines': ['* PHONE %? :PHONE:'],
                      \ },
                      \ 'h': {
                      \   'description': 'Habit',
                      \   'lines': [
                      \     '* NEXT %?',
                      \     'SCHEDULED: [%(strftime(g:dotoo#time#date_day_format)) +1m]',
                      \     ':PROPERTIES:',
                      \     ':STYLE: habit',
                      \     ':REPEAT_TO_STATE: NEXT',
                      \     ':END:'
                      \   ]
                      \ }
                      \})
<
            Templates are represented by a dictionary where the key is the
            short_key used to select the template from the capture menu.

            It has the following structure

            * `description` provides a human friendly explanation of what this
               template represents
            * `lines` is a list for each line of the template. You can use
               `%?` as a placeholder for where the cursor will be while editing
               the template immidiately after selecting it and `%(...)` to
               inline viml code that will be evaluated.
            * `target` defines the target for  this capture template should be
               saved to, it can either be a dotoo file path or a dotoo move
               target such as `todo:Tasks` which represents a dotoo file
               headline to use as the parent for this captured headline.

            For easier customization this allows you to be able to add new or
            override the provided templates easily. >
                " Override an existing template
                let g:dotoo#capture#templates = {
                      \ 't': {
                      \   'target': 'refile-personal:Todos'
                      \ }
                      \}

                " Or add new template
                let g:dotoo#capture#templates = {
                      \ 'x': {
                      \   'description': 'eXtra template',
                      \   'lines': ['* eXtra %? :EXTRA:'],
                      \ }
                      \}

                " Or both
                let g:dotoo#capture#templates = {
                      \ 't': {
                      \   'target': 'refile-personal:Todos'
                      \ },
                      \ 'x': {
                      \   'description': 'eXtra template',
                      \   'lines': ['* eXtra %? :EXTRA:'],
                      \ }
                      \}
                " Or remove an existing template
                let g:dotoo#capture#templates = {
                      \ 't': {}
                      \}
<
                                                           *g:dotoo_capture_cmd*
      |g:dotoo#capture#cmd|
            This setting defines the capture command to be used for the capture
            window. Set this to `edit`, `split`, `vert split`, or `tabe` to open
            the capture window in same, split, vertical split, or new tab. >
              let g:dotoo#capture#cmd = 'split'
<
                                                      *g:dotoo_disable_mappings*
      |g:dotoo_disable_mappings|
            This setting sets whether to disable all default mappings (also
            within dotoo, dotooagenda, dotoocapture filetypes). >
                let g:dotoo_disable_mappings = 0
<
                                        *g:dotoo#agenda_views#agenda#hide_empty*
      |g:dotoo#agenda_views#agenda#hide_empty|
            This setting, if enabled hides dates from the agenda view that have
            no events, i.e. no scheduled / due tasks. >
                let g:dotoo#agenda_views#agenda#hide_empty = 0
<
                                          *g:dotoo#agenda_views#agenda#start_of*
      |g:dotoo#agenda_views#agenda#start_of|
            This setting can be one of `span` or `today`.

            When set to `span`, the agenda view starts at the beggining of the
            span till the end of the span (day, week, month). This is the
            default.

            When set to `today`, the agenda view starts at today's date till the
            number of days for the current span (day, week, month). >
                let g:dotoo#agenda_views#agenda#start_of = 'span'
<
                                              *g:dotoo#agenda_views#agenda#span*
      |g:dotoo#agenda_views#agenda#span|
            This setting defines the default span of the agenda agenda view.
            This can be one of `day` (default), `week` or `month`. >
                let g:dotoo#agenda_views#agenda#span = 'day'
<
                                                                  *g:dotoo#home*
      |g:dotoo#home|
            This setting defines the home directory for all dotoo files. >
                let g:dotoo#home = expand('~/Documents/dotoo-files')
<
                                                       *g:dotoo#link#pages_path*
      |g:dotoo#link#pages_path|
            This setting defines the default path for files to be created as
            pages for a wiki.

            Eg.) A link [[My Test]] will create a new file `My Test.dotoo` in
            the path defined by this setting. >
                let g:dotoo#link#pages_path = printf('%s/%s', g:dotoo#home, 'pages')
<
-------------------------------------------------------------------------------
MAPPINGS                                                        *dotoo-mappings*

                                                                            *gA*
                                                     *dotoo-options-agenda-view*
      `gA`: Open Agenda Menu

                                                                            *gC*
                                                         *dotoo-options-capture*
                                                    *dotoo-options-capture-menu*
      `gC`: Trigger Capture Menu

-------------------------------------------------------------------------------
COMMANDS                                                        *dotoo-commands*

                                                              *:DotooAdjustDate*
                                                        *dotoo-:DotooAdjustDate*
      :DotooAdjustDate
            Adjust Date under cursor by an arbitrary amount. This command is
            only available within dotoo & dotoocapture buffers.

            Examples: >
                :DotooAdjustDate +1y " Increment date by 1 year
                :DotooAdjustDate +1m " Increment date by 1 month
                :DotooAdjustDate +1w " Increment date by 1 week
                :DotooAdjustDate +1d " Increment date by 1 day
                :DotooAdjustDate +1h " Increment date by 1 hour
                :DotooAdjustDate +1M " Increment date by 1 minute
                :DotooAdjustDate +1s " Increment date by 1 second

                :DotooAdjustDate -1y " Decrement date by 1 year
                :DotooAdjustDate -1m " Decrement date by 1 month
                :DotooAdjustDate -1w " Decrement date by 1 week
                :DotooAdjustDate -1d " Decrement date by 1 day
                :DotooAdjustDate -1h " Decrement date by 1 hour
                :DotooAdjustDate -1M " Decrement date by 1 minute
                :DotooAdjustDate -1s " Decrement date by 1 second
<
            The argument to this command is optional. If you do not provide an
            argument it will prompt you to provide the amount by which the
            date should be adjusted.

-------------------------------------------------------------------------------
CONTRIBUTING                                                 *dotoo-contributing*

      You can find the code at https://github.com/dhruvasagar/vim-dotoo, fork
      it and send me a PR with a good commit message and i'll review it and
      merge if it looks good. You can also reach me directly via e-mail at
      dhruva [dot] sagar [at] gmail [dot] com

      Report issues at https://github.com/dhruavsagar/vim-dotoo/issues

-------------------------------------------------------------------------------
CREDITS                                                           *dotoo-credits*

      This plugin was inspired by the original emacs org-mode and the workflow
      described by Bernt Hansen at http://doc.norang.ca/org-mode.html.

      I have taken bits of the syntax definitions & ideas from `jceb/vim-orgmode`

      I will also like to shout out for bairui
      (http://of-vim-and-vigor.blogspot.in) who helped me a lot in building
      this.
